{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction arrayDiff(arr1, arr2) {\n  if (arr1.length !== arr2.length) return true;\n\n  for (var i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) return true;\n  }\n\n  return false;\n}\n\nvar defaultExpandedDefault = [];\nvar TreeView = React.forwardRef(function TreeView(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultCollapseIcon = props.defaultCollapseIcon,\n      defaultEndIcon = props.defaultEndIcon,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,\n      defaultExpandIcon = props.defaultExpandIcon,\n      defaultParentIcon = props.defaultParentIcon,\n      expandedProp = props.expanded,\n      onNodeToggle = props.onNodeToggle,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"expanded\", \"onNodeToggle\"]);\n\n  var _React$useState = React.useState(null),\n      tabable = _React$useState[0],\n      setTabable = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var firstNode = React.useRef(null);\n  var nodeMap = React.useRef({});\n  var firstCharMap = React.useRef({});\n\n  var _React$useRef = React.useRef(expandedProp !== undefined),\n      isControlled = _React$useRef.current;\n\n  var _React$useState3 = React.useState(defaultExpanded),\n      expandedState = _React$useState3[0],\n      setExpandedState = _React$useState3[1];\n\n  var expanded = (isControlled ? expandedProp : expandedState) || defaultExpandedDefault;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (isControlled !== (expandedProp != null)) {\n        console.error([\"Material-UI: A component is changing \".concat(isControlled ? 'a ' : 'an un', \"controlled TreeView to be \").concat(isControlled ? 'un' : '', \"controlled.\"), 'Elements should not switch from uncontrolled to controlled (or vice versa).', 'Decide between using a controlled or uncontrolled TreeView ' + 'element for the lifetime of the component.', 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [expandedProp, isControlled]);\n  }\n\n  var prevChildIds = React.useRef([]);\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (arrayDiff(prevChildIds.current, childIds)) {\n      nodeMap.current[-1] = {\n        parent: null,\n        children: childIds\n      };\n      childIds.forEach(function (id, index) {\n        if (index === 0) {\n          firstNode.current = id;\n          setTabable(id);\n        }\n\n        nodeMap.current[id] = {\n          parent: null\n        };\n      });\n      prevChildIds.current = childIds;\n    }\n  }, [children]);\n  var isExpanded = React.useCallback(function (id) {\n    return expanded.indexOf(id) !== -1;\n  }, [expanded]);\n\n  var isTabable = function isTabable(id) {\n    return tabable === id;\n  };\n\n  var isFocused = function isFocused(id) {\n    return focused === id;\n  };\n\n  var getLastNode = React.useCallback(function (id) {\n    var map = nodeMap.current[id];\n\n    if (isExpanded(id) && map.children && map.children.length > 0) {\n      return getLastNode(map.children[map.children.length - 1]);\n    }\n\n    return id;\n  }, [isExpanded]);\n\n  var focus = function focus(id) {\n    if (id) {\n      setTabable(id);\n    }\n\n    setFocused(id);\n  };\n\n  var getNextNode = function getNextNode(id, end) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n      var nextIndex = nodeIndex + 1;\n\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n\n      return getNextNode(parent.id, true);\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  var getPreviousNode = function getPreviousNode(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n\n      if (nodeIndex !== 0) {\n        var nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n\n      return parent.id;\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  var focusNextNode = function focusNextNode(id) {\n    var nextNode = getNextNode(id);\n\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n\n  var focusPreviousNode = function focusPreviousNode(id) {\n    var previousNode = getPreviousNode(id);\n\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n\n  var focusFirstNode = function focusFirstNode() {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  var focusLastNode = function focusLastNode() {\n    var topLevelNodes = nodeMap.current[-1].children;\n    var lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  var toggle = function toggle(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focused;\n    var newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(function (id) {\n        return id !== value;\n      });\n      setTabable(function (oldTabable) {\n        var map = nodeMap.current[oldTabable];\n\n        if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n          return value;\n        }\n\n        return oldTabable;\n      });\n    } else {\n      newExpanded = [value].concat(_toConsumableArray(expanded));\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    if (!isControlled) {\n      setExpandedState(newExpanded);\n    }\n  };\n\n  var expandAllSiblings = function expandAllSiblings(event, id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n    var diff;\n\n    if (parent) {\n      diff = parent.children.filter(function (child) {\n        return !isExpanded(child);\n      });\n    } else {\n      var topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(function (node) {\n        return !isExpanded(node);\n      });\n    }\n\n    var newExpanded = [].concat(_toConsumableArray(expanded), _toConsumableArray(diff));\n\n    if (!isControlled) {\n      setExpandedState(newExpanded);\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n  };\n\n  var handleLeftArrow = function handleLeftArrow(id, event) {\n    var flag = false;\n\n    if (isExpanded(id)) {\n      toggle(event, id);\n      flag = true;\n    } else {\n      var parent = nodeMap.current[id].parent;\n\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  var getIndexFirstChars = function getIndexFirstChars(firstChars, startIndex, char) {\n    for (var i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var setFocusByFirstCharacter = function setFocusByFirstCharacter(id, char) {\n    var start;\n    var index;\n    var lowercaseChar = char.toLowerCase();\n    var firstCharIds = [];\n    var firstChars = []; // This really only works since the ids are strings\n\n    Object.entries(firstCharMap.current).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          nodeId = _ref2[0],\n          firstChar = _ref2[1];\n\n      var map = nodeMap.current[nodeId];\n      var visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start === nodeMap.current.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = getIndexFirstChars(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {\n    var currentMap = nodeMap.current[id];\n    nodeMap.current[id] = _extends({}, currentMap, {\n      children: childrenIds,\n      id: id\n    });\n    childrenIds.forEach(function (childId) {\n      var currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = _extends({}, currentChildMap, {\n        parent: id,\n        id: childId\n      });\n    });\n  };\n\n  var removeNodeFromNodeMap = function removeNodeFromNodeMap(id) {\n    var map = nodeMap.current[id];\n\n    if (map) {\n      if (map.parent) {\n        var parentMap = nodeMap.current[map.parent];\n\n        if (parentMap && parentMap.children) {\n          var parentChildren = parentMap.children.filter(function (c) {\n            return c !== id;\n          });\n          nodeMap.current[map.parent] = _extends({}, parentMap, {\n            children: parentChildren\n          });\n        }\n      }\n\n      delete nodeMap.current[id];\n    }\n  };\n\n  var handleFirstChars = function handleFirstChars(id, firstChar) {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return React.createElement(TreeViewContext.Provider, {\n    value: {\n      expandAllSiblings: expandAllSiblings,\n      focus: focus,\n      focusFirstNode: focusFirstNode,\n      focusLastNode: focusLastNode,\n      focusNextNode: focusNextNode,\n      focusPreviousNode: focusPreviousNode,\n      handleFirstChars: handleFirstChars,\n      handleLeftArrow: handleLeftArrow,\n      addNodeToNodeMap: addNodeToNodeMap,\n      removeNodeFromNodeMap: removeNodeFromNodeMap,\n      icons: {\n        defaultCollapseIcon: defaultCollapseIcon,\n        defaultExpandIcon: defaultExpandIcon,\n        defaultParentIcon: defaultParentIcon,\n        defaultEndIcon: defaultEndIcon\n      },\n      isExpanded: isExpanded,\n      isFocused: isFocused,\n      isTabable: isTabable,\n      setFocusByFirstCharacter: setFocusByFirstCharacter,\n      toggle: toggle\n    }\n  }, React.createElement(\"ul\", _extends({\n    role: \"tree\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeView'\n})(TreeView);","map":{"version":3,"sources":["/Users/jatinkumar/Desktop/react-material-dashboard-master/node_modules/@material-ui/lab/esm/TreeView/TreeView.js"],"names":["_extends","_slicedToArray","_toConsumableArray","_objectWithoutProperties","React","clsx","PropTypes","TreeViewContext","withStyles","styles","root","padding","margin","listStyle","arrayDiff","arr1","arr2","length","i","defaultExpandedDefault","TreeView","forwardRef","props","ref","children","classes","className","defaultCollapseIcon","defaultEndIcon","_props$defaultExpande","defaultExpanded","defaultExpandIcon","defaultParentIcon","expandedProp","expanded","onNodeToggle","other","_React$useState","useState","tabable","setTabable","_React$useState2","focused","setFocused","firstNode","useRef","nodeMap","firstCharMap","_React$useRef","undefined","isControlled","current","_React$useState3","expandedState","setExpandedState","process","env","NODE_ENV","useEffect","console","error","concat","join","prevChildIds","childIds","Children","map","child","nodeId","parent","forEach","id","index","isExpanded","useCallback","indexOf","isTabable","isFocused","getLastNode","focus","getNextNode","end","nodeIndex","nextIndex","topLevelNodes","topLevelNodeIndex","getPreviousNode","focusNextNode","nextNode","focusPreviousNode","previousNode","focusFirstNode","focusLastNode","lastNode","toggle","event","value","arguments","newExpanded","filter","oldTabable","expandAllSiblings","diff","node","handleLeftArrow","flag","preventDefault","stopPropagation","getIndexFirstChars","firstChars","startIndex","char","setFocusByFirstCharacter","start","lowercaseChar","toLowerCase","firstCharIds","Object","entries","_ref","_ref2","firstChar","visible","push","addNodeToNodeMap","childrenIds","currentMap","childId","currentChildMap","removeNodeFromNodeMap","parentMap","parentChildren","c","handleFirstChars","createElement","Provider","icons","role","propTypes","object","string","arrayOf","func","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAO,IAAIC,MAAM,GAAG;AAClB;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,CADL;AAEJC,IAAAA,MAAM,EAAE,CAFJ;AAGJC,IAAAA,SAAS,EAAE;AAHP;AAFY,CAAb;;AASP,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AAC7B,MAAID,IAAI,CAACE,MAAL,KAAgBD,IAAI,CAACC,MAAzB,EAAiC,OAAO,IAAP;;AAEjC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACE,MAAzB,EAAiCC,CAAC,IAAI,CAAtC,EAAyC;AACvC,QAAIH,IAAI,CAACG,CAAD,CAAJ,KAAYF,IAAI,CAACE,CAAD,CAApB,EAAyB,OAAO,IAAP;AAC1B;;AAED,SAAO,KAAP;AACD;;AAED,IAAIC,sBAAsB,GAAG,EAA7B;AACA,IAAIC,QAAQ,GAAGhB,KAAK,CAACiB,UAAN,CAAiB,SAASD,QAAT,CAAkBE,KAAlB,EAAyBC,GAAzB,EAA8B;AAC5D,MAAIC,QAAQ,GAAGF,KAAK,CAACE,QAArB;AAAA,MACIC,OAAO,GAAGH,KAAK,CAACG,OADpB;AAAA,MAEIC,SAAS,GAAGJ,KAAK,CAACI,SAFtB;AAAA,MAGIC,mBAAmB,GAAGL,KAAK,CAACK,mBAHhC;AAAA,MAIIC,cAAc,GAAGN,KAAK,CAACM,cAJ3B;AAAA,MAKIC,qBAAqB,GAAGP,KAAK,CAACQ,eALlC;AAAA,MAMIA,eAAe,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmCV,sBAAnC,GAA4DU,qBANlF;AAAA,MAOIE,iBAAiB,GAAGT,KAAK,CAACS,iBAP9B;AAAA,MAQIC,iBAAiB,GAAGV,KAAK,CAACU,iBAR9B;AAAA,MASIC,YAAY,GAAGX,KAAK,CAACY,QATzB;AAAA,MAUIC,YAAY,GAAGb,KAAK,CAACa,YAVzB;AAAA,MAWIC,KAAK,GAAGjC,wBAAwB,CAACmB,KAAD,EAAQ,CAAC,UAAD,EAAa,SAAb,EAAwB,WAAxB,EAAqC,qBAArC,EAA4D,gBAA5D,EAA8E,iBAA9E,EAAiG,mBAAjG,EAAsH,mBAAtH,EAA2I,UAA3I,EAAuJ,cAAvJ,CAAR,CAXpC;;AAaA,MAAIe,eAAe,GAAGjC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAtB;AAAA,MACIC,OAAO,GAAGF,eAAe,CAAC,CAAD,CAD7B;AAAA,MAEIG,UAAU,GAAGH,eAAe,CAAC,CAAD,CAFhC;;AAIA,MAAII,gBAAgB,GAAGrC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAvB;AAAA,MACII,OAAO,GAAGD,gBAAgB,CAAC,CAAD,CAD9B;AAAA,MAEIE,UAAU,GAAGF,gBAAgB,CAAC,CAAD,CAFjC;;AAIA,MAAIG,SAAS,GAAGxC,KAAK,CAACyC,MAAN,CAAa,IAAb,CAAhB;AACA,MAAIC,OAAO,GAAG1C,KAAK,CAACyC,MAAN,CAAa,EAAb,CAAd;AACA,MAAIE,YAAY,GAAG3C,KAAK,CAACyC,MAAN,CAAa,EAAb,CAAnB;;AAEA,MAAIG,aAAa,GAAG5C,KAAK,CAACyC,MAAN,CAAaZ,YAAY,KAAKgB,SAA9B,CAApB;AAAA,MACIC,YAAY,GAAGF,aAAa,CAACG,OADjC;;AAGA,MAAIC,gBAAgB,GAAGhD,KAAK,CAACkC,QAAN,CAAeR,eAAf,CAAvB;AAAA,MACIuB,aAAa,GAAGD,gBAAgB,CAAC,CAAD,CADpC;AAAA,MAEIE,gBAAgB,GAAGF,gBAAgB,CAAC,CAAD,CAFvC;;AAIA,MAAIlB,QAAQ,GAAG,CAACgB,YAAY,GAAGjB,YAAH,GAAkBoB,aAA/B,KAAiDlC,sBAAhE;;AAEA,MAAIoC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACArD,IAAAA,KAAK,CAACsD,SAAN,CAAgB,YAAY;AAC1B,UAAIR,YAAY,MAAMjB,YAAY,IAAI,IAAtB,CAAhB,EAA6C;AAC3C0B,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,wCAAwCC,MAAxC,CAA+CX,YAAY,GAAG,IAAH,GAAU,OAArE,EAA8E,4BAA9E,EAA4GW,MAA5G,CAAmHX,YAAY,GAAG,IAAH,GAAU,EAAzI,EAA6I,aAA7I,CAAD,EAA8J,6EAA9J,EAA6O,gEAAgE,4CAA7S,EAA2V,sDAA3V,EAAmZY,IAAnZ,CAAwZ,IAAxZ,CAAd;AACD;AACF,KAJD,EAIG,CAAC7B,YAAD,EAAeiB,YAAf,CAJH;AAKD;;AAED,MAAIa,YAAY,GAAG3D,KAAK,CAACyC,MAAN,CAAa,EAAb,CAAnB;AACAzC,EAAAA,KAAK,CAACsD,SAAN,CAAgB,YAAY;AAC1B,QAAIM,QAAQ,GAAG5D,KAAK,CAAC6D,QAAN,CAAeC,GAAf,CAAmB1C,QAAnB,EAA6B,UAAU2C,KAAV,EAAiB;AAC3D,aAAOA,KAAK,CAAC7C,KAAN,CAAY8C,MAAnB;AACD,KAFc,KAET,EAFN;;AAIA,QAAItD,SAAS,CAACiD,YAAY,CAACZ,OAAd,EAAuBa,QAAvB,CAAb,EAA+C;AAC7ClB,MAAAA,OAAO,CAACK,OAAR,CAAgB,CAAC,CAAjB,IAAsB;AACpBkB,QAAAA,MAAM,EAAE,IADY;AAEpB7C,QAAAA,QAAQ,EAAEwC;AAFU,OAAtB;AAIAA,MAAAA,QAAQ,CAACM,OAAT,CAAiB,UAAUC,EAAV,EAAcC,KAAd,EAAqB;AACpC,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf5B,UAAAA,SAAS,CAACO,OAAV,GAAoBoB,EAApB;AACA/B,UAAAA,UAAU,CAAC+B,EAAD,CAAV;AACD;;AAEDzB,QAAAA,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,IAAsB;AACpBF,UAAAA,MAAM,EAAE;AADY,SAAtB;AAGD,OATD;AAUAN,MAAAA,YAAY,CAACZ,OAAb,GAAuBa,QAAvB;AACD;AACF,GAtBD,EAsBG,CAACxC,QAAD,CAtBH;AAuBA,MAAIiD,UAAU,GAAGrE,KAAK,CAACsE,WAAN,CAAkB,UAAUH,EAAV,EAAc;AAC/C,WAAOrC,QAAQ,CAACyC,OAAT,CAAiBJ,EAAjB,MAAyB,CAAC,CAAjC;AACD,GAFgB,EAEd,CAACrC,QAAD,CAFc,CAAjB;;AAIA,MAAI0C,SAAS,GAAG,SAASA,SAAT,CAAmBL,EAAnB,EAAuB;AACrC,WAAOhC,OAAO,KAAKgC,EAAnB;AACD,GAFD;;AAIA,MAAIM,SAAS,GAAG,SAASA,SAAT,CAAmBN,EAAnB,EAAuB;AACrC,WAAO7B,OAAO,KAAK6B,EAAnB;AACD,GAFD;;AAIA,MAAIO,WAAW,GAAG1E,KAAK,CAACsE,WAAN,CAAkB,UAAUH,EAAV,EAAc;AAChD,QAAIL,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAV;;AAEA,QAAIE,UAAU,CAACF,EAAD,CAAV,IAAkBL,GAAG,CAAC1C,QAAtB,IAAkC0C,GAAG,CAAC1C,QAAJ,CAAaP,MAAb,GAAsB,CAA5D,EAA+D;AAC7D,aAAO6D,WAAW,CAACZ,GAAG,CAAC1C,QAAJ,CAAa0C,GAAG,CAAC1C,QAAJ,CAAaP,MAAb,GAAsB,CAAnC,CAAD,CAAlB;AACD;;AAED,WAAOsD,EAAP;AACD,GARiB,EAQf,CAACE,UAAD,CARe,CAAlB;;AAUA,MAAIM,KAAK,GAAG,SAASA,KAAT,CAAeR,EAAf,EAAmB;AAC7B,QAAIA,EAAJ,EAAQ;AACN/B,MAAAA,UAAU,CAAC+B,EAAD,CAAV;AACD;;AAED5B,IAAAA,UAAU,CAAC4B,EAAD,CAAV;AACD,GAND;;AAQA,MAAIS,WAAW,GAAG,SAASA,WAAT,CAAqBT,EAArB,EAAyBU,GAAzB,EAA8B;AAC9C,QAAIf,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAV;AACA,QAAIF,MAAM,GAAGvB,OAAO,CAACK,OAAR,CAAgBe,GAAG,CAACG,MAApB,CAAb;;AAEA,QAAI,CAACY,GAAL,EAAU;AACR,UAAIR,UAAU,CAACF,EAAD,CAAd,EAAoB;AAClB,eAAOL,GAAG,CAAC1C,QAAJ,CAAa,CAAb,CAAP;AACD;AACF;;AAED,QAAI6C,MAAJ,EAAY;AACV,UAAIa,SAAS,GAAGb,MAAM,CAAC7C,QAAP,CAAgBmD,OAAhB,CAAwBJ,EAAxB,CAAhB;AACA,UAAIY,SAAS,GAAGD,SAAS,GAAG,CAA5B;;AAEA,UAAIb,MAAM,CAAC7C,QAAP,CAAgBP,MAAhB,GAAyBkE,SAA7B,EAAwC;AACtC,eAAOd,MAAM,CAAC7C,QAAP,CAAgB2D,SAAhB,CAAP;AACD;;AAED,aAAOH,WAAW,CAACX,MAAM,CAACE,EAAR,EAAY,IAAZ,CAAlB;AACD;;AAED,QAAIa,aAAa,GAAGtC,OAAO,CAACK,OAAR,CAAgB,CAAC,CAAjB,EAAoB3B,QAAxC;AACA,QAAI6D,iBAAiB,GAAGD,aAAa,CAACT,OAAd,CAAsBJ,EAAtB,CAAxB;;AAEA,QAAIc,iBAAiB,KAAK,CAAC,CAAvB,IAA4BA,iBAAiB,KAAKD,aAAa,CAACnE,MAAd,GAAuB,CAA7E,EAAgF;AAC9E,aAAOmE,aAAa,CAACC,iBAAiB,GAAG,CAArB,CAApB;AACD;;AAED,WAAO,IAAP;AACD,GA7BD;;AA+BA,MAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBf,EAAzB,EAA6B;AACjD,QAAIL,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAV;AACA,QAAIF,MAAM,GAAGvB,OAAO,CAACK,OAAR,CAAgBe,GAAG,CAACG,MAApB,CAAb;;AAEA,QAAIA,MAAJ,EAAY;AACV,UAAIa,SAAS,GAAGb,MAAM,CAAC7C,QAAP,CAAgBmD,OAAhB,CAAwBJ,EAAxB,CAAhB;;AAEA,UAAIW,SAAS,KAAK,CAAlB,EAAqB;AACnB,YAAIC,SAAS,GAAGD,SAAS,GAAG,CAA5B;AACA,eAAOJ,WAAW,CAACT,MAAM,CAAC7C,QAAP,CAAgB2D,SAAhB,CAAD,CAAlB;AACD;;AAED,aAAOd,MAAM,CAACE,EAAd;AACD;;AAED,QAAIa,aAAa,GAAGtC,OAAO,CAACK,OAAR,CAAgB,CAAC,CAAjB,EAAoB3B,QAAxC;AACA,QAAI6D,iBAAiB,GAAGD,aAAa,CAACT,OAAd,CAAsBJ,EAAtB,CAAxB;;AAEA,QAAIc,iBAAiB,GAAG,CAAxB,EAA2B;AACzB,aAAOP,WAAW,CAACM,aAAa,CAACC,iBAAiB,GAAG,CAArB,CAAd,CAAlB;AACD;;AAED,WAAO,IAAP;AACD,GAvBD;;AAyBA,MAAIE,aAAa,GAAG,SAASA,aAAT,CAAuBhB,EAAvB,EAA2B;AAC7C,QAAIiB,QAAQ,GAAGR,WAAW,CAACT,EAAD,CAA1B;;AAEA,QAAIiB,QAAJ,EAAc;AACZT,MAAAA,KAAK,CAACS,QAAD,CAAL;AACD;AACF,GAND;;AAQA,MAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BlB,EAA3B,EAA+B;AACrD,QAAImB,YAAY,GAAGJ,eAAe,CAACf,EAAD,CAAlC;;AAEA,QAAImB,YAAJ,EAAkB;AAChBX,MAAAA,KAAK,CAACW,YAAD,CAAL;AACD;AACF,GAND;;AAQA,MAAIC,cAAc,GAAG,SAASA,cAAT,GAA0B;AAC7C,QAAI/C,SAAS,CAACO,OAAd,EAAuB;AACrB4B,MAAAA,KAAK,CAACnC,SAAS,CAACO,OAAX,CAAL;AACD;AACF,GAJD;;AAMA,MAAIyC,aAAa,GAAG,SAASA,aAAT,GAAyB;AAC3C,QAAIR,aAAa,GAAGtC,OAAO,CAACK,OAAR,CAAgB,CAAC,CAAjB,EAAoB3B,QAAxC;AACA,QAAIqE,QAAQ,GAAGf,WAAW,CAACM,aAAa,CAACA,aAAa,CAACnE,MAAd,GAAuB,CAAxB,CAAd,CAA1B;AACA8D,IAAAA,KAAK,CAACc,QAAD,CAAL;AACD,GAJD;;AAMA,MAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAClC,QAAIC,KAAK,GAAGC,SAAS,CAAChF,MAAV,GAAmB,CAAnB,IAAwBgF,SAAS,CAAC,CAAD,CAAT,KAAiBhD,SAAzC,GAAqDgD,SAAS,CAAC,CAAD,CAA9D,GAAoEvD,OAAhF;AACA,QAAIwD,WAAJ;;AAEA,QAAIhE,QAAQ,CAACyC,OAAT,CAAiBqB,KAAjB,MAA4B,CAAC,CAAjC,EAAoC;AAClCE,MAAAA,WAAW,GAAGhE,QAAQ,CAACiE,MAAT,CAAgB,UAAU5B,EAAV,EAAc;AAC1C,eAAOA,EAAE,KAAKyB,KAAd;AACD,OAFa,CAAd;AAGAxD,MAAAA,UAAU,CAAC,UAAU4D,UAAV,EAAsB;AAC/B,YAAIlC,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBiD,UAAhB,CAAV;;AAEA,YAAIA,UAAU,IAAI,CAAClC,GAAG,IAAIA,GAAG,CAACG,MAAX,GAAoBH,GAAG,CAACG,MAAJ,CAAWE,EAA/B,GAAoC,IAArC,MAA+CyB,KAAjE,EAAwE;AACtE,iBAAOA,KAAP;AACD;;AAED,eAAOI,UAAP;AACD,OARS,CAAV;AASD,KAbD,MAaO;AACLF,MAAAA,WAAW,GAAG,CAACF,KAAD,EAAQnC,MAAR,CAAe3D,kBAAkB,CAACgC,QAAD,CAAjC,CAAd;AACD;;AAED,QAAIC,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAAC4D,KAAD,EAAQG,WAAR,CAAZ;AACD;;AAED,QAAI,CAAChD,YAAL,EAAmB;AACjBI,MAAAA,gBAAgB,CAAC4C,WAAD,CAAhB;AACD;AACF,GA5BD;;AA8BA,MAAIG,iBAAiB,GAAG,SAASA,iBAAT,CAA2BN,KAA3B,EAAkCxB,EAAlC,EAAsC;AAC5D,QAAIL,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAV;AACA,QAAIF,MAAM,GAAGvB,OAAO,CAACK,OAAR,CAAgBe,GAAG,CAACG,MAApB,CAAb;AACA,QAAIiC,IAAJ;;AAEA,QAAIjC,MAAJ,EAAY;AACViC,MAAAA,IAAI,GAAGjC,MAAM,CAAC7C,QAAP,CAAgB2E,MAAhB,CAAuB,UAAUhC,KAAV,EAAiB;AAC7C,eAAO,CAACM,UAAU,CAACN,KAAD,CAAlB;AACD,OAFM,CAAP;AAGD,KAJD,MAIO;AACL,UAAIiB,aAAa,GAAGtC,OAAO,CAACK,OAAR,CAAgB,CAAC,CAAjB,EAAoB3B,QAAxC;AACA8E,MAAAA,IAAI,GAAGlB,aAAa,CAACe,MAAd,CAAqB,UAAUI,IAAV,EAAgB;AAC1C,eAAO,CAAC9B,UAAU,CAAC8B,IAAD,CAAlB;AACD,OAFM,CAAP;AAGD;;AAED,QAAIL,WAAW,GAAG,GAAGrC,MAAH,CAAU3D,kBAAkB,CAACgC,QAAD,CAA5B,EAAwChC,kBAAkB,CAACoG,IAAD,CAA1D,CAAlB;;AAEA,QAAI,CAACpD,YAAL,EAAmB;AACjBI,MAAAA,gBAAgB,CAAC4C,WAAD,CAAhB;AACD;;AAED,QAAI/D,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAAC4D,KAAD,EAAQG,WAAR,CAAZ;AACD;AACF,GAzBD;;AA2BA,MAAIM,eAAe,GAAG,SAASA,eAAT,CAAyBjC,EAAzB,EAA6BwB,KAA7B,EAAoC;AACxD,QAAIU,IAAI,GAAG,KAAX;;AAEA,QAAIhC,UAAU,CAACF,EAAD,CAAd,EAAoB;AAClBuB,MAAAA,MAAM,CAACC,KAAD,EAAQxB,EAAR,CAAN;AACAkC,MAAAA,IAAI,GAAG,IAAP;AACD,KAHD,MAGO;AACL,UAAIpC,MAAM,GAAGvB,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,EAAoBF,MAAjC;;AAEA,UAAIA,MAAJ,EAAY;AACVU,QAAAA,KAAK,CAACV,MAAD,CAAL;AACAoC,QAAAA,IAAI,GAAG,IAAP;AACD;AACF;;AAED,QAAIA,IAAI,IAAIV,KAAZ,EAAmB;AACjBA,MAAAA,KAAK,CAACW,cAAN;AACAX,MAAAA,KAAK,CAACY,eAAN;AACD;AACF,GAnBD;;AAqBA,MAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,UAA5B,EAAwCC,UAAxC,EAAoDC,IAApD,EAA0D;AACjF,SAAK,IAAI7F,CAAC,GAAG4F,UAAb,EAAyB5F,CAAC,GAAG2F,UAAU,CAAC5F,MAAxC,EAAgDC,CAAC,IAAI,CAArD,EAAwD;AACtD,UAAI6F,IAAI,KAAKF,UAAU,CAAC3F,CAAD,CAAvB,EAA4B;AAC1B,eAAOA,CAAP;AACD;AACF;;AAED,WAAO,CAAC,CAAR;AACD,GARD;;AAUA,MAAI8F,wBAAwB,GAAG,SAASA,wBAAT,CAAkCzC,EAAlC,EAAsCwC,IAAtC,EAA4C;AACzE,QAAIE,KAAJ;AACA,QAAIzC,KAAJ;AACA,QAAI0C,aAAa,GAAGH,IAAI,CAACI,WAAL,EAApB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIP,UAAU,GAAG,EAAjB,CALyE,CAKpD;;AAErBQ,IAAAA,MAAM,CAACC,OAAP,CAAevE,YAAY,CAACI,OAA5B,EAAqCmB,OAArC,CAA6C,UAAUiD,IAAV,EAAgB;AAC3D,UAAIC,KAAK,GAAGvH,cAAc,CAACsH,IAAD,EAAO,CAAP,CAA1B;AAAA,UACInD,MAAM,GAAGoD,KAAK,CAAC,CAAD,CADlB;AAAA,UAEIC,SAAS,GAAGD,KAAK,CAAC,CAAD,CAFrB;;AAIA,UAAItD,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBiB,MAAhB,CAAV;AACA,UAAIsD,OAAO,GAAGxD,GAAG,CAACG,MAAJ,GAAaI,UAAU,CAACP,GAAG,CAACG,MAAL,CAAvB,GAAsC,IAApD;;AAEA,UAAIqD,OAAJ,EAAa;AACXN,QAAAA,YAAY,CAACO,IAAb,CAAkBvD,MAAlB;AACAyC,QAAAA,UAAU,CAACc,IAAX,CAAgBF,SAAhB;AACD;AACF,KAZD,EAPyE,CAmBrE;;AAEJR,IAAAA,KAAK,GAAGG,YAAY,CAACzC,OAAb,CAAqBJ,EAArB,IAA2B,CAAnC;;AAEA,QAAI0C,KAAK,KAAKnE,OAAO,CAACK,OAAR,CAAgBlC,MAA9B,EAAsC;AACpCgG,MAAAA,KAAK,GAAG,CAAR;AACD,KAzBwE,CAyBvE;;;AAGFzC,IAAAA,KAAK,GAAGoC,kBAAkB,CAACC,UAAD,EAAaI,KAAb,EAAoBC,aAApB,CAA1B,CA5ByE,CA4BX;;AAE9D,QAAI1C,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBA,MAAAA,KAAK,GAAGoC,kBAAkB,CAACC,UAAD,EAAa,CAAb,EAAgBK,aAAhB,CAA1B;AACD,KAhCwE,CAgCvE;;;AAGF,QAAI1C,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdO,MAAAA,KAAK,CAACqC,YAAY,CAAC5C,KAAD,CAAb,CAAL;AACD;AACF,GAtCD;;AAwCA,MAAIoD,gBAAgB,GAAG,SAASA,gBAAT,CAA0BrD,EAA1B,EAA8BsD,WAA9B,EAA2C;AAChE,QAAIC,UAAU,GAAGhF,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAjB;AACAzB,IAAAA,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,IAAsBvE,QAAQ,CAAC,EAAD,EAAK8H,UAAL,EAAiB;AAC7CtG,MAAAA,QAAQ,EAAEqG,WADmC;AAE7CtD,MAAAA,EAAE,EAAEA;AAFyC,KAAjB,CAA9B;AAIAsD,IAAAA,WAAW,CAACvD,OAAZ,CAAoB,UAAUyD,OAAV,EAAmB;AACrC,UAAIC,eAAe,GAAGlF,OAAO,CAACK,OAAR,CAAgB4E,OAAhB,CAAtB;AACAjF,MAAAA,OAAO,CAACK,OAAR,CAAgB4E,OAAhB,IAA2B/H,QAAQ,CAAC,EAAD,EAAKgI,eAAL,EAAsB;AACvD3D,QAAAA,MAAM,EAAEE,EAD+C;AAEvDA,QAAAA,EAAE,EAAEwD;AAFmD,OAAtB,CAAnC;AAID,KAND;AAOD,GAbD;;AAeA,MAAIE,qBAAqB,GAAG,SAASA,qBAAT,CAA+B1D,EAA/B,EAAmC;AAC7D,QAAIL,GAAG,GAAGpB,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAV;;AAEA,QAAIL,GAAJ,EAAS;AACP,UAAIA,GAAG,CAACG,MAAR,EAAgB;AACd,YAAI6D,SAAS,GAAGpF,OAAO,CAACK,OAAR,CAAgBe,GAAG,CAACG,MAApB,CAAhB;;AAEA,YAAI6D,SAAS,IAAIA,SAAS,CAAC1G,QAA3B,EAAqC;AACnC,cAAI2G,cAAc,GAAGD,SAAS,CAAC1G,QAAV,CAAmB2E,MAAnB,CAA0B,UAAUiC,CAAV,EAAa;AAC1D,mBAAOA,CAAC,KAAK7D,EAAb;AACD,WAFoB,CAArB;AAGAzB,UAAAA,OAAO,CAACK,OAAR,CAAgBe,GAAG,CAACG,MAApB,IAA8BrE,QAAQ,CAAC,EAAD,EAAKkI,SAAL,EAAgB;AACpD1G,YAAAA,QAAQ,EAAE2G;AAD0C,WAAhB,CAAtC;AAGD;AACF;;AAED,aAAOrF,OAAO,CAACK,OAAR,CAAgBoB,EAAhB,CAAP;AACD;AACF,GAnBD;;AAqBA,MAAI8D,gBAAgB,GAAG,SAASA,gBAAT,CAA0B9D,EAA1B,EAA8BkD,SAA9B,EAAyC;AAC9D1E,IAAAA,YAAY,CAACI,OAAb,CAAqBoB,EAArB,IAA2BkD,SAA3B;AACD,GAFD;;AAIA,SAAOrH,KAAK,CAACkI,aAAN,CAAoB/H,eAAe,CAACgI,QAApC,EAA8C;AACnDvC,IAAAA,KAAK,EAAE;AACLK,MAAAA,iBAAiB,EAAEA,iBADd;AAELtB,MAAAA,KAAK,EAAEA,KAFF;AAGLY,MAAAA,cAAc,EAAEA,cAHX;AAILC,MAAAA,aAAa,EAAEA,aAJV;AAKLL,MAAAA,aAAa,EAAEA,aALV;AAMLE,MAAAA,iBAAiB,EAAEA,iBANd;AAOL4C,MAAAA,gBAAgB,EAAEA,gBAPb;AAQL7B,MAAAA,eAAe,EAAEA,eARZ;AASLoB,MAAAA,gBAAgB,EAAEA,gBATb;AAULK,MAAAA,qBAAqB,EAAEA,qBAVlB;AAWLO,MAAAA,KAAK,EAAE;AACL7G,QAAAA,mBAAmB,EAAEA,mBADhB;AAELI,QAAAA,iBAAiB,EAAEA,iBAFd;AAGLC,QAAAA,iBAAiB,EAAEA,iBAHd;AAILJ,QAAAA,cAAc,EAAEA;AAJX,OAXF;AAiBL6C,MAAAA,UAAU,EAAEA,UAjBP;AAkBLI,MAAAA,SAAS,EAAEA,SAlBN;AAmBLD,MAAAA,SAAS,EAAEA,SAnBN;AAoBLoC,MAAAA,wBAAwB,EAAEA,wBApBrB;AAqBLlB,MAAAA,MAAM,EAAEA;AArBH;AAD4C,GAA9C,EAwBJ1F,KAAK,CAACkI,aAAN,CAAoB,IAApB,EAA0BtI,QAAQ,CAAC;AACpCyI,IAAAA,IAAI,EAAE,MAD8B;AAEpC/G,IAAAA,SAAS,EAAErB,IAAI,CAACoB,OAAO,CAACf,IAAT,EAAegB,SAAf,CAFqB;AAGpCH,IAAAA,GAAG,EAAEA;AAH+B,GAAD,EAIlCa,KAJkC,CAAlC,EAIQZ,QAJR,CAxBI,CAAP;AA6BD,CA3Xc,CAAf;AA4XA+B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrC,QAAQ,CAACsH,SAAT,GAAqB;AAC3D;AACA;AACA;AACA;;AAEA;;;AAGAlH,EAAAA,QAAQ,EAAElB,SAAS,CAACiG,IATuC;;AAW3D;;;;AAIA9E,EAAAA,OAAO,EAAEnB,SAAS,CAACqI,MAfwC;;AAiB3D;;;AAGAjH,EAAAA,SAAS,EAAEpB,SAAS,CAACsI,MApBsC;;AAsB3D;;;AAGAjH,EAAAA,mBAAmB,EAAErB,SAAS,CAACiG,IAzB4B;;AA2B3D;;;;AAIA3E,EAAAA,cAAc,EAAEtB,SAAS,CAACiG,IA/BiC;;AAiC3D;;;AAGAzE,EAAAA,eAAe,EAAExB,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACsI,MAA5B,CApC0C;;AAsC3D;;;AAGA7G,EAAAA,iBAAiB,EAAEzB,SAAS,CAACiG,IAzC8B;;AA2C3D;;;;AAIAvE,EAAAA,iBAAiB,EAAE1B,SAAS,CAACiG,IA/C8B;;AAiD3D;;;AAGArE,EAAAA,QAAQ,EAAE5B,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACsI,MAA5B,CApDiD;;AAsD3D;;;;;;AAMAzG,EAAAA,YAAY,EAAE7B,SAAS,CAACwI;AA5DmC,CAA7D,GA6DI,KAAK,CA7DT;AA8DA,eAAetI,UAAU,CAACC,MAAD,EAAS;AAChCsI,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZ3H,QAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction arrayDiff(arr1, arr2) {\n  if (arr1.length !== arr2.length) return true;\n\n  for (var i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) return true;\n  }\n\n  return false;\n}\n\nvar defaultExpandedDefault = [];\nvar TreeView = React.forwardRef(function TreeView(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultCollapseIcon = props.defaultCollapseIcon,\n      defaultEndIcon = props.defaultEndIcon,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,\n      defaultExpandIcon = props.defaultExpandIcon,\n      defaultParentIcon = props.defaultParentIcon,\n      expandedProp = props.expanded,\n      onNodeToggle = props.onNodeToggle,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"expanded\", \"onNodeToggle\"]);\n\n  var _React$useState = React.useState(null),\n      tabable = _React$useState[0],\n      setTabable = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var firstNode = React.useRef(null);\n  var nodeMap = React.useRef({});\n  var firstCharMap = React.useRef({});\n\n  var _React$useRef = React.useRef(expandedProp !== undefined),\n      isControlled = _React$useRef.current;\n\n  var _React$useState3 = React.useState(defaultExpanded),\n      expandedState = _React$useState3[0],\n      setExpandedState = _React$useState3[1];\n\n  var expanded = (isControlled ? expandedProp : expandedState) || defaultExpandedDefault;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (isControlled !== (expandedProp != null)) {\n        console.error([\"Material-UI: A component is changing \".concat(isControlled ? 'a ' : 'an un', \"controlled TreeView to be \").concat(isControlled ? 'un' : '', \"controlled.\"), 'Elements should not switch from uncontrolled to controlled (or vice versa).', 'Decide between using a controlled or uncontrolled TreeView ' + 'element for the lifetime of the component.', 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [expandedProp, isControlled]);\n  }\n\n  var prevChildIds = React.useRef([]);\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (arrayDiff(prevChildIds.current, childIds)) {\n      nodeMap.current[-1] = {\n        parent: null,\n        children: childIds\n      };\n      childIds.forEach(function (id, index) {\n        if (index === 0) {\n          firstNode.current = id;\n          setTabable(id);\n        }\n\n        nodeMap.current[id] = {\n          parent: null\n        };\n      });\n      prevChildIds.current = childIds;\n    }\n  }, [children]);\n  var isExpanded = React.useCallback(function (id) {\n    return expanded.indexOf(id) !== -1;\n  }, [expanded]);\n\n  var isTabable = function isTabable(id) {\n    return tabable === id;\n  };\n\n  var isFocused = function isFocused(id) {\n    return focused === id;\n  };\n\n  var getLastNode = React.useCallback(function (id) {\n    var map = nodeMap.current[id];\n\n    if (isExpanded(id) && map.children && map.children.length > 0) {\n      return getLastNode(map.children[map.children.length - 1]);\n    }\n\n    return id;\n  }, [isExpanded]);\n\n  var focus = function focus(id) {\n    if (id) {\n      setTabable(id);\n    }\n\n    setFocused(id);\n  };\n\n  var getNextNode = function getNextNode(id, end) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n      var nextIndex = nodeIndex + 1;\n\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n\n      return getNextNode(parent.id, true);\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  var getPreviousNode = function getPreviousNode(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n\n      if (nodeIndex !== 0) {\n        var nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n\n      return parent.id;\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  var focusNextNode = function focusNextNode(id) {\n    var nextNode = getNextNode(id);\n\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n\n  var focusPreviousNode = function focusPreviousNode(id) {\n    var previousNode = getPreviousNode(id);\n\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n\n  var focusFirstNode = function focusFirstNode() {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  var focusLastNode = function focusLastNode() {\n    var topLevelNodes = nodeMap.current[-1].children;\n    var lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  var toggle = function toggle(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focused;\n    var newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(function (id) {\n        return id !== value;\n      });\n      setTabable(function (oldTabable) {\n        var map = nodeMap.current[oldTabable];\n\n        if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n          return value;\n        }\n\n        return oldTabable;\n      });\n    } else {\n      newExpanded = [value].concat(_toConsumableArray(expanded));\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    if (!isControlled) {\n      setExpandedState(newExpanded);\n    }\n  };\n\n  var expandAllSiblings = function expandAllSiblings(event, id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n    var diff;\n\n    if (parent) {\n      diff = parent.children.filter(function (child) {\n        return !isExpanded(child);\n      });\n    } else {\n      var topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(function (node) {\n        return !isExpanded(node);\n      });\n    }\n\n    var newExpanded = [].concat(_toConsumableArray(expanded), _toConsumableArray(diff));\n\n    if (!isControlled) {\n      setExpandedState(newExpanded);\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n  };\n\n  var handleLeftArrow = function handleLeftArrow(id, event) {\n    var flag = false;\n\n    if (isExpanded(id)) {\n      toggle(event, id);\n      flag = true;\n    } else {\n      var parent = nodeMap.current[id].parent;\n\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  var getIndexFirstChars = function getIndexFirstChars(firstChars, startIndex, char) {\n    for (var i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var setFocusByFirstCharacter = function setFocusByFirstCharacter(id, char) {\n    var start;\n    var index;\n    var lowercaseChar = char.toLowerCase();\n    var firstCharIds = [];\n    var firstChars = []; // This really only works since the ids are strings\n\n    Object.entries(firstCharMap.current).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          nodeId = _ref2[0],\n          firstChar = _ref2[1];\n\n      var map = nodeMap.current[nodeId];\n      var visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start === nodeMap.current.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = getIndexFirstChars(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {\n    var currentMap = nodeMap.current[id];\n    nodeMap.current[id] = _extends({}, currentMap, {\n      children: childrenIds,\n      id: id\n    });\n    childrenIds.forEach(function (childId) {\n      var currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = _extends({}, currentChildMap, {\n        parent: id,\n        id: childId\n      });\n    });\n  };\n\n  var removeNodeFromNodeMap = function removeNodeFromNodeMap(id) {\n    var map = nodeMap.current[id];\n\n    if (map) {\n      if (map.parent) {\n        var parentMap = nodeMap.current[map.parent];\n\n        if (parentMap && parentMap.children) {\n          var parentChildren = parentMap.children.filter(function (c) {\n            return c !== id;\n          });\n          nodeMap.current[map.parent] = _extends({}, parentMap, {\n            children: parentChildren\n          });\n        }\n      }\n\n      delete nodeMap.current[id];\n    }\n  };\n\n  var handleFirstChars = function handleFirstChars(id, firstChar) {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return React.createElement(TreeViewContext.Provider, {\n    value: {\n      expandAllSiblings: expandAllSiblings,\n      focus: focus,\n      focusFirstNode: focusFirstNode,\n      focusLastNode: focusLastNode,\n      focusNextNode: focusNextNode,\n      focusPreviousNode: focusPreviousNode,\n      handleFirstChars: handleFirstChars,\n      handleLeftArrow: handleLeftArrow,\n      addNodeToNodeMap: addNodeToNodeMap,\n      removeNodeFromNodeMap: removeNodeFromNodeMap,\n      icons: {\n        defaultCollapseIcon: defaultCollapseIcon,\n        defaultExpandIcon: defaultExpandIcon,\n        defaultParentIcon: defaultParentIcon,\n        defaultEndIcon: defaultEndIcon\n      },\n      isExpanded: isExpanded,\n      isFocused: isFocused,\n      isTabable: isTabable,\n      setFocusByFirstCharacter: setFocusByFirstCharacter,\n      toggle: toggle\n    }\n  }, React.createElement(\"ul\", _extends({\n    role: \"tree\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeView'\n})(TreeView);"]},"metadata":{},"sourceType":"module"}