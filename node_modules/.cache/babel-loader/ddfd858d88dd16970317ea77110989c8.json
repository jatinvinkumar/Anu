{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _omitBy2 = require('lodash/omitBy');\n\nvar _omitBy3 = _interopRequireDefault(_omitBy2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nexports.deleteFile = deleteFile;\nexports.writeMetadataToDb = writeMetadataToDb;\nexports.uploadFileWithProgress = uploadFileWithProgress;\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,\n    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;\n\nfunction deleteFile(firebase, _ref) {\n  var path = _ref.path,\n      dbPath = _ref.dbPath;\n  return firebase.storage().ref(path).delete().then(function () {\n    if (!dbPath || !firebase.database && !firebase.firestore) {\n      return {\n        path: path\n      };\n    }\n\n    var metaDeletePromise = function metaDeletePromise() {\n      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();\n    };\n\n    return metaDeletePromise().then(function () {\n      return {\n        path: path,\n        dbPath: dbPath\n      };\n    });\n  });\n}\n\nfunction createUploadMetaResponseHandler(_ref2) {\n  var fileData = _ref2.fileData,\n      firebase = _ref2.firebase,\n      uploadTaskSnapshot = _ref2.uploadTaskSnapshot,\n      downloadURL = _ref2.downloadURL;\n  return function uploadResultFromSnap(metaDataSnapshot) {\n    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;\n    var result = {\n      snapshot: metaDataSnapshot,\n      key: metaDataSnapshot.key || metaDataSnapshot.id,\n      File: fileData,\n      metaDataSnapshot: metaDataSnapshot,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n      uploadTaskSnaphot: uploadTaskSnapshot,\n      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP\n    };\n\n    if (metaDataSnapshot.id) {\n      result.id = metaDataSnapshot.id;\n    }\n\n    if (downloadURL) {\n      result.downloadURL = downloadURL;\n    }\n\n    return result;\n  };\n}\n\nfunction getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot) {\n  if (uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function') {\n    return uploadTaskSnapshot.ref.getDownloadURL();\n  }\n\n  return Promise.resolve(uploadTaskSnapshot.downloadURLs && uploadTaskSnapshot.downloadURLs[0]);\n}\n\nfunction writeMetadataToDb(_ref3) {\n  var firebase = _ref3.firebase,\n      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,\n      dbPath = _ref3.dbPath,\n      options = _ref3.options;\n  var _firebase$_$config = firebase._.config,\n      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,\n      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;\n  var metadataFactory = options.metadataFactory;\n  var metaFactoryFunction = metadataFactory || fileMetadataFactory;\n  return getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot).then(function (downloadURL) {\n    var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata, downloadURL) : (0, _omitBy3.default)(uploadTaskSnapshot.metadata, _isUndefined3.default);\n    var resultFromSnap = createUploadMetaResponseHandler({\n      fileData: fileData,\n      firebase: firebase,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n      downloadURL: downloadURL\n    });\n\n    var metaSetPromise = function metaSetPromise(fileData) {\n      if (useFirestoreForStorageMeta) {\n        return firebase.firestore().collection(dbPath).add(fileData);\n      }\n\n      var newMetaRef = firebase.database().ref(dbPath).push();\n      return newMetaRef.set(fileData).then(function (res) {\n        return newMetaRef;\n      });\n    };\n\n    return metaSetPromise(fileData).then(resultFromSnap);\n  });\n}\n\nfunction uploadFileWithProgress(dispatch, firebase, _ref4) {\n  var path = _ref4.path,\n      file = _ref4.file,\n      filename = _ref4.filename,\n      meta = _ref4.meta,\n      fileMetadata = _ref4.fileMetadata;\n  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file, fileMetadata);\n  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n    next: function next(snapshot) {\n      dispatch({\n        type: FILE_UPLOAD_PROGRESS,\n        meta: meta,\n        payload: {\n          snapshot: snapshot,\n          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)\n        }\n      });\n    },\n    error: function error(err) {\n      dispatch({\n        type: FILE_UPLOAD_ERROR,\n        meta: meta,\n        payload: err\n      });\n      unListen();\n    },\n    complete: function complete() {\n      unListen();\n    }\n  });\n  return uploadEvent;\n}","map":{"version":3,"sources":["/Users/jatinkumar/Desktop/Anupuam/Anu/node_modules/react-redux-firebase/es/utils/storage.js"],"names":["Object","defineProperty","exports","value","_isUndefined2","require","_isUndefined3","_interopRequireDefault","_omitBy2","_omitBy3","_isFunction2","_isFunction3","deleteFile","writeMetadataToDb","uploadFileWithProgress","_constants","obj","__esModule","default","FILE_UPLOAD_ERROR","actionTypes","FILE_UPLOAD_PROGRESS","firebase","_ref","path","dbPath","storage","ref","delete","then","database","firestore","metaDeletePromise","_","config","useFirestoreForStorageMeta","doc","remove","createUploadMetaResponseHandler","_ref2","fileData","uploadTaskSnapshot","downloadURL","uploadResultFromSnap","metaDataSnapshot","result","snapshot","key","id","File","uploadTaskSnaphot","createdAt","FieldValue","serverTimestamp","ServerValue","TIMESTAMP","getDownloadURLFromUploadTaskSnapshot","getDownloadURL","Promise","resolve","downloadURLs","_ref3","options","_firebase$_$config","fileMetadataFactory","metadataFactory","metaFactoryFunction","metadata","resultFromSnap","metaSetPromise","collection","add","newMetaRef","push","set","res","dispatch","_ref4","file","filename","meta","fileMetadata","uploadEvent","put","unListen","on","TaskEvent","STATE_CHANGED","next","type","payload","percent","Math","floor","bytesTransferred","totalBytes","error","err","complete"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,aAAa,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACH,aAAD,CAA1C;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAII,QAAQ,GAAGF,sBAAsB,CAACC,QAAD,CAArC;;AAEA,IAAIE,YAAY,GAAGL,OAAO,CAAC,mBAAD,CAA1B;;AAEA,IAAIM,YAAY,GAAGJ,sBAAsB,CAACG,YAAD,CAAzC;;AAEAR,OAAO,CAACU,UAAR,GAAqBA,UAArB;AACAV,OAAO,CAACW,iBAAR,GAA4BA,iBAA5B;AACAX,OAAO,CAACY,sBAAR,GAAiCA,sBAAjC;;AAEA,IAAIC,UAAU,GAAGV,OAAO,CAAC,cAAD,CAAxB;;AAEA,SAASE,sBAAT,CAAgCS,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAIG,iBAAiB,GAAGJ,UAAU,CAACK,WAAX,CAAuBD,iBAA/C;AAAA,IACIE,oBAAoB,GAAGN,UAAU,CAACK,WAAX,CAAuBC,oBADlD;;AAEA,SAAST,UAAT,CAAoBU,QAApB,EAA8BC,IAA9B,EAAoC;AAClC,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAGA,SAAOH,QAAQ,CAACI,OAAT,GAAmBC,GAAnB,CAAuBH,IAAvB,EAA6BI,MAA7B,GAAsCC,IAAtC,CAA2C,YAAY;AAC5D,QAAI,CAACJ,MAAD,IAAW,CAACH,QAAQ,CAACQ,QAAV,IAAsB,CAACR,QAAQ,CAACS,SAA/C,EAA0D;AACxD,aAAO;AAAEP,QAAAA,IAAI,EAAEA;AAAR,OAAP;AACD;;AAED,QAAIQ,iBAAiB,GAAG,SAASA,iBAAT,GAA6B;AACnD,aAAOV,QAAQ,CAACW,CAAT,CAAWC,MAAX,CAAkBC,0BAAlB,GAA+Cb,QAAQ,CAACS,SAAT,GAAqBK,GAArB,CAAyBX,MAAzB,EAAiCG,MAAjC,EAA/C,GAA2FN,QAAQ,CAACQ,QAAT,GAAoBH,GAApB,CAAwBF,MAAxB,EAAgCY,MAAhC,EAAlG;AACD,KAFD;;AAIA,WAAOL,iBAAiB,GAAGH,IAApB,CAAyB,YAAY;AAC1C,aAAO;AAAEL,QAAAA,IAAI,EAAEA,IAAR;AAAcC,QAAAA,MAAM,EAAEA;AAAtB,OAAP;AACD,KAFM,CAAP;AAGD,GAZM,CAAP;AAaD;;AAED,SAASa,+BAAT,CAAyCC,KAAzC,EAAgD;AAC9C,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIlB,QAAQ,GAAGiB,KAAK,CAACjB,QADrB;AAAA,MAEImB,kBAAkB,GAAGF,KAAK,CAACE,kBAF/B;AAAA,MAGIC,WAAW,GAAGH,KAAK,CAACG,WAHxB;AAKA,SAAO,SAASC,oBAAT,CAA8BC,gBAA9B,EAAgD;AACrD,QAAIT,0BAA0B,GAAGb,QAAQ,CAACW,CAAT,CAAWC,MAAX,CAAkBC,0BAAnD;AAEA,QAAIU,MAAM,GAAG;AACXC,MAAAA,QAAQ,EAAEF,gBADC;AAEXG,MAAAA,GAAG,EAAEH,gBAAgB,CAACG,GAAjB,IAAwBH,gBAAgB,CAACI,EAFnC;AAGXC,MAAAA,IAAI,EAAET,QAHK;AAIXI,MAAAA,gBAAgB,EAAEA,gBAJP;AAKXH,MAAAA,kBAAkB,EAAEA,kBALT;AAOXS,MAAAA,iBAAiB,EAAET,kBAPR;AAQXU,MAAAA,SAAS,EAAEhB,0BAA0B,GAAGb,QAAQ,CAACS,SAAT,CAAmBqB,UAAnB,CAA8BC,eAA9B,EAAH,GAAqD/B,QAAQ,CAACQ,QAAT,CAAkBwB,WAAlB,CAA8BC;AAR7G,KAAb;;AAWA,QAAIX,gBAAgB,CAACI,EAArB,EAAyB;AACvBH,MAAAA,MAAM,CAACG,EAAP,GAAYJ,gBAAgB,CAACI,EAA7B;AACD;;AAED,QAAIN,WAAJ,EAAiB;AACfG,MAAAA,MAAM,CAACH,WAAP,GAAqBA,WAArB;AACD;;AACD,WAAOG,MAAP;AACD,GAtBD;AAuBD;;AAED,SAASW,oCAAT,CAA8Cf,kBAA9C,EAAkE;AAChE,MAAIA,kBAAkB,CAACd,GAAnB,IAA0B,OAAOc,kBAAkB,CAACd,GAAnB,CAAuB8B,cAA9B,KAAiD,UAA/E,EAA2F;AACzF,WAAOhB,kBAAkB,CAACd,GAAnB,CAAuB8B,cAAvB,EAAP;AACD;;AAED,SAAOC,OAAO,CAACC,OAAR,CAAgBlB,kBAAkB,CAACmB,YAAnB,IAAmCnB,kBAAkB,CAACmB,YAAnB,CAAgC,CAAhC,CAAnD,CAAP;AACD;;AAED,SAAS/C,iBAAT,CAA2BgD,KAA3B,EAAkC;AAChC,MAAIvC,QAAQ,GAAGuC,KAAK,CAACvC,QAArB;AAAA,MACImB,kBAAkB,GAAGoB,KAAK,CAACpB,kBAD/B;AAAA,MAEIhB,MAAM,GAAGoC,KAAK,CAACpC,MAFnB;AAAA,MAGIqC,OAAO,GAAGD,KAAK,CAACC,OAHpB;AAIA,MAAIC,kBAAkB,GAAGzC,QAAQ,CAACW,CAAT,CAAWC,MAApC;AAAA,MACI8B,mBAAmB,GAAGD,kBAAkB,CAACC,mBAD7C;AAAA,MAEI7B,0BAA0B,GAAG4B,kBAAkB,CAAC5B,0BAFpD;AAGA,MAAI8B,eAAe,GAAGH,OAAO,CAACG,eAA9B;AAEA,MAAIC,mBAAmB,GAAGD,eAAe,IAAID,mBAA7C;AAEA,SAAOR,oCAAoC,CAACf,kBAAD,CAApC,CAAyDZ,IAAzD,CAA8D,UAAUa,WAAV,EAAuB;AAC1F,QAAIF,QAAQ,GAAG,CAAC,GAAG7B,YAAY,CAACO,OAAjB,EAA0BgD,mBAA1B,IAAiDA,mBAAmB,CAACzB,kBAAD,EAAqBnB,QAArB,EAA+BmB,kBAAkB,CAAC0B,QAAlD,EAA4DzB,WAA5D,CAApE,GAA+I,CAAC,GAAGjC,QAAQ,CAACS,OAAb,EAAsBuB,kBAAkB,CAAC0B,QAAzC,EAAmD7D,aAAa,CAACY,OAAjE,CAA9J;AAEA,QAAIkD,cAAc,GAAG9B,+BAA+B,CAAC;AACnDE,MAAAA,QAAQ,EAAEA,QADyC;AAEnDlB,MAAAA,QAAQ,EAAEA,QAFyC;AAGnDmB,MAAAA,kBAAkB,EAAEA,kBAH+B;AAInDC,MAAAA,WAAW,EAAEA;AAJsC,KAAD,CAApD;;AAOA,QAAI2B,cAAc,GAAG,SAASA,cAAT,CAAwB7B,QAAxB,EAAkC;AACrD,UAAIL,0BAAJ,EAAgC;AAC9B,eAAOb,QAAQ,CAACS,SAAT,GAAqBuC,UAArB,CAAgC7C,MAAhC,EAAwC8C,GAAxC,CAA4C/B,QAA5C,CAAP;AACD;;AAED,UAAIgC,UAAU,GAAGlD,QAAQ,CAACQ,QAAT,GAAoBH,GAApB,CAAwBF,MAAxB,EAAgCgD,IAAhC,EAAjB;AAEA,aAAOD,UAAU,CAACE,GAAX,CAAelC,QAAf,EAAyBX,IAAzB,CAA8B,UAAU8C,GAAV,EAAe;AAClD,eAAOH,UAAP;AACD,OAFM,CAAP;AAGD,KAVD;;AAYA,WAAOH,cAAc,CAAC7B,QAAD,CAAd,CAAyBX,IAAzB,CAA8BuC,cAA9B,CAAP;AACD,GAvBM,CAAP;AAwBD;;AAED,SAAStD,sBAAT,CAAgC8D,QAAhC,EAA0CtD,QAA1C,EAAoDuD,KAApD,EAA2D;AACzD,MAAIrD,IAAI,GAAGqD,KAAK,CAACrD,IAAjB;AAAA,MACIsD,IAAI,GAAGD,KAAK,CAACC,IADjB;AAAA,MAEIC,QAAQ,GAAGF,KAAK,CAACE,QAFrB;AAAA,MAGIC,IAAI,GAAGH,KAAK,CAACG,IAHjB;AAAA,MAIIC,YAAY,GAAGJ,KAAK,CAACI,YAJzB;AAMA,MAAIC,WAAW,GAAG5D,QAAQ,CAACI,OAAT,GAAmBC,GAAnB,CAAuBH,IAAI,GAAG,GAAP,GAAauD,QAApC,EAA8CI,GAA9C,CAAkDL,IAAlD,EAAwDG,YAAxD,CAAlB;AAEA,MAAIG,QAAQ,GAAGF,WAAW,CAACG,EAAZ,CAAe/D,QAAQ,CAACI,OAAT,CAAiB4D,SAAjB,CAA2BC,aAA1C,EAAyD;AACtEC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAc1C,QAAd,EAAwB;AAC5B8B,MAAAA,QAAQ,CAAC;AACPa,QAAAA,IAAI,EAAEpE,oBADC;AAEP2D,QAAAA,IAAI,EAAEA,IAFC;AAGPU,QAAAA,OAAO,EAAE;AACP5C,UAAAA,QAAQ,EAAEA,QADH;AAEP6C,UAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAW/C,QAAQ,CAACgD,gBAAT,GAA4BhD,QAAQ,CAACiD,UAArC,GAAkD,GAA7D;AAFF;AAHF,OAAD,CAAR;AAQD,KAVqE;AAWtEC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,GAAf,EAAoB;AACzBrB,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAEtE,iBAAR;AAA2B6D,QAAAA,IAAI,EAAEA,IAAjC;AAAuCU,QAAAA,OAAO,EAAEO;AAAhD,OAAD,CAAR;AACAb,MAAAA,QAAQ;AACT,KAdqE;AAetEc,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5Bd,MAAAA,QAAQ;AACT;AAjBqE,GAAzD,CAAf;AAmBA,SAAOF,WAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _omitBy2 = require('lodash/omitBy');\n\nvar _omitBy3 = _interopRequireDefault(_omitBy2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nexports.deleteFile = deleteFile;\nexports.writeMetadataToDb = writeMetadataToDb;\nexports.uploadFileWithProgress = uploadFileWithProgress;\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,\n    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;\nfunction deleteFile(firebase, _ref) {\n  var path = _ref.path,\n      dbPath = _ref.dbPath;\n\n  return firebase.storage().ref(path).delete().then(function () {\n    if (!dbPath || !firebase.database && !firebase.firestore) {\n      return { path: path };\n    }\n\n    var metaDeletePromise = function metaDeletePromise() {\n      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();\n    };\n\n    return metaDeletePromise().then(function () {\n      return { path: path, dbPath: dbPath };\n    });\n  });\n}\n\nfunction createUploadMetaResponseHandler(_ref2) {\n  var fileData = _ref2.fileData,\n      firebase = _ref2.firebase,\n      uploadTaskSnapshot = _ref2.uploadTaskSnapshot,\n      downloadURL = _ref2.downloadURL;\n\n  return function uploadResultFromSnap(metaDataSnapshot) {\n    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;\n\n    var result = {\n      snapshot: metaDataSnapshot,\n      key: metaDataSnapshot.key || metaDataSnapshot.id,\n      File: fileData,\n      metaDataSnapshot: metaDataSnapshot,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n\n      uploadTaskSnaphot: uploadTaskSnapshot,\n      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP\n    };\n\n    if (metaDataSnapshot.id) {\n      result.id = metaDataSnapshot.id;\n    }\n\n    if (downloadURL) {\n      result.downloadURL = downloadURL;\n    }\n    return result;\n  };\n}\n\nfunction getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot) {\n  if (uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function') {\n    return uploadTaskSnapshot.ref.getDownloadURL();\n  }\n\n  return Promise.resolve(uploadTaskSnapshot.downloadURLs && uploadTaskSnapshot.downloadURLs[0]);\n}\n\nfunction writeMetadataToDb(_ref3) {\n  var firebase = _ref3.firebase,\n      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,\n      dbPath = _ref3.dbPath,\n      options = _ref3.options;\n  var _firebase$_$config = firebase._.config,\n      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,\n      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;\n  var metadataFactory = options.metadataFactory;\n\n  var metaFactoryFunction = metadataFactory || fileMetadataFactory;\n\n  return getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot).then(function (downloadURL) {\n    var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata, downloadURL) : (0, _omitBy3.default)(uploadTaskSnapshot.metadata, _isUndefined3.default);\n\n    var resultFromSnap = createUploadMetaResponseHandler({\n      fileData: fileData,\n      firebase: firebase,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n      downloadURL: downloadURL\n    });\n\n    var metaSetPromise = function metaSetPromise(fileData) {\n      if (useFirestoreForStorageMeta) {\n        return firebase.firestore().collection(dbPath).add(fileData);\n      }\n\n      var newMetaRef = firebase.database().ref(dbPath).push();\n\n      return newMetaRef.set(fileData).then(function (res) {\n        return newMetaRef;\n      });\n    };\n\n    return metaSetPromise(fileData).then(resultFromSnap);\n  });\n}\n\nfunction uploadFileWithProgress(dispatch, firebase, _ref4) {\n  var path = _ref4.path,\n      file = _ref4.file,\n      filename = _ref4.filename,\n      meta = _ref4.meta,\n      fileMetadata = _ref4.fileMetadata;\n\n  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file, fileMetadata);\n\n  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n    next: function next(snapshot) {\n      dispatch({\n        type: FILE_UPLOAD_PROGRESS,\n        meta: meta,\n        payload: {\n          snapshot: snapshot,\n          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)\n        }\n      });\n    },\n    error: function error(err) {\n      dispatch({ type: FILE_UPLOAD_ERROR, meta: meta, payload: err });\n      unListen();\n    },\n    complete: function complete() {\n      unListen();\n    }\n  });\n  return uploadEvent;\n}"]},"metadata":{},"sourceType":"script"}