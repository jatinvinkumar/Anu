{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions  */\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { withStyles, useTheme } from '@material-ui/core/styles';\nimport { useForkRef } from '@material-ui/core/utils';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      listStyle: 'none',\n      margin: 0,\n      padding: 0,\n      outline: 0,\n      '&:focus > $content': {\n        backgroundColor: theme.palette.grey[400]\n      }\n    },\n\n    /* Pseudo-class applied to the root element when expanded. */\n    expanded: {},\n\n    /* Styles applied to the `role=\"group\"` element. */\n    group: {\n      margin: 0,\n      padding: 0,\n      marginLeft: 26\n    },\n\n    /* Styles applied to the tree node content. */\n    content: {\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      '&:hover': {\n        backgroundColor: theme.palette.action.hover\n      }\n    },\n\n    /* Styles applied to the tree node icon and collapse/expand icon. */\n    iconContainer: {\n      marginRight: 2,\n      width: 24,\n      display: 'flex',\n      justifyContent: 'center'\n    },\n\n    /* Styles applied to the label element. */\n    label: {\n      width: '100%'\n    }\n  };\n};\n\nvar isPrintableCharacter = function isPrintableCharacter(str) {\n  return str && str.length === 1 && str.match(/\\S/);\n};\n\nvar TreeItem = React.forwardRef(function TreeItem(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      collapseIcon = props.collapseIcon,\n      endIcon = props.endIcon,\n      expandIcon = props.expandIcon,\n      iconProp = props.icon,\n      label = props.label,\n      nodeId = props.nodeId,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      onKeyDown = props.onKeyDown,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Collapse : _props$TransitionComp,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"collapseIcon\", \"endIcon\", \"expandIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onFocus\", \"onKeyDown\", \"TransitionComponent\"]);\n\n  var _React$useContext = React.useContext(TreeViewContext),\n      expandAllSiblings = _React$useContext.expandAllSiblings,\n      focus = _React$useContext.focus,\n      focusFirstNode = _React$useContext.focusFirstNode,\n      focusLastNode = _React$useContext.focusLastNode,\n      focusNextNode = _React$useContext.focusNextNode,\n      focusPreviousNode = _React$useContext.focusPreviousNode,\n      handleFirstChars = _React$useContext.handleFirstChars,\n      handleLeftArrow = _React$useContext.handleLeftArrow,\n      addNodeToNodeMap = _React$useContext.addNodeToNodeMap,\n      removeNodeFromNodeMap = _React$useContext.removeNodeFromNodeMap,\n      contextIcons = _React$useContext.icons,\n      isExpanded = _React$useContext.isExpanded,\n      isFocused = _React$useContext.isFocused,\n      isTabable = _React$useContext.isTabable,\n      setFocusByFirstCharacter = _React$useContext.setFocusByFirstCharacter,\n      toggle = _React$useContext.toggle;\n\n  var nodeRef = React.useRef(null);\n  var contentRef = React.useRef(null);\n  var handleRef = useForkRef(nodeRef, ref);\n  var icon = iconProp;\n  var expandable = Boolean(Array.isArray(children) ? children.length : children);\n  var expanded = isExpanded ? isExpanded(nodeId) : false;\n  var focused = isFocused ? isFocused(nodeId) : false;\n  var tabable = isTabable ? isTabable(nodeId) : false;\n  var icons = contextIcons || {};\n  var theme = useTheme();\n\n  if (!icon) {\n    if (expandable) {\n      if (!expanded) {\n        icon = expandIcon || icons.defaultExpandIcon;\n      } else {\n        icon = collapseIcon || icons.defaultCollapseIcon;\n      }\n\n      if (!icon) {\n        icon = icons.defaultParentIcon;\n      }\n    } else {\n      icon = endIcon || icons.defaultEndIcon;\n    }\n  }\n\n  var handleClick = function handleClick(event) {\n    if (!focused) {\n      focus(nodeId);\n    }\n\n    if (expandable) {\n      toggle(event, nodeId);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var printableCharacter = function printableCharacter(event, key) {\n    if (key === '*') {\n      expandAllSiblings(event, nodeId);\n      return true;\n    }\n\n    if (isPrintableCharacter(key)) {\n      setFocusByFirstCharacter(nodeId, key);\n      return true;\n    }\n\n    return false;\n  };\n\n  var handleNextArrow = function handleNextArrow(event) {\n    if (expandable) {\n      if (expanded) {\n        focusNextNode(nodeId);\n      } else {\n        toggle(event);\n      }\n    }\n  };\n\n  var handlePreviousArrow = function handlePreviousArrow(event) {\n    handleLeftArrow(nodeId, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var flag = false;\n    var key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.currentTarget !== event.target) {\n      return;\n    }\n\n    if (event.shift) {\n      if (key === ' ' || key === 'Enter') {\n        event.stopPropagation();\n      } else if (isPrintableCharacter(key)) {\n        flag = printableCharacter(event, key);\n      }\n    } else {\n      switch (key) {\n        case 'Enter':\n        case ' ':\n          if (nodeRef.current === event.currentTarget && expandable) {\n            toggle(event);\n            flag = true;\n          }\n\n          event.stopPropagation();\n          break;\n\n        case 'ArrowDown':\n          focusNextNode(nodeId);\n          flag = true;\n          break;\n\n        case 'ArrowUp':\n          focusPreviousNode(nodeId);\n          flag = true;\n          break;\n\n        case 'ArrowRight':\n          if (theme.direction === 'rtl') {\n            handlePreviousArrow(event);\n          } else {\n            handleNextArrow(event);\n            flag = true;\n          }\n\n          break;\n\n        case 'ArrowLeft':\n          if (theme.direction === 'rtl') {\n            handleNextArrow(event);\n            flag = true;\n          } else {\n            handlePreviousArrow(event);\n          }\n\n          break;\n\n        case 'Home':\n          focusFirstNode();\n          flag = true;\n          break;\n\n        case 'End':\n          focusLastNode();\n          flag = true;\n          break;\n\n        default:\n          if (isPrintableCharacter(key)) {\n            flag = printableCharacter(event, key);\n          }\n\n      }\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (!focused && tabable) {\n      focus(nodeId);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (addNodeToNodeMap) {\n      addNodeToNodeMap(nodeId, childIds);\n    }\n  }, [children, nodeId, addNodeToNodeMap]);\n  React.useEffect(function () {\n    if (removeNodeFromNodeMap) {\n      return function () {\n        removeNodeFromNodeMap(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [nodeId, removeNodeFromNodeMap]);\n  React.useEffect(function () {\n    if (handleFirstChars && label) {\n      handleFirstChars(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n    }\n  }, [handleFirstChars, nodeId, label]);\n  React.useEffect(function () {\n    if (focused) {\n      nodeRef.current.focus();\n    }\n  }, [focused]);\n  return React.createElement(\"li\", _extends({\n    className: clsx(classes.root, className, expanded && classes.expanded),\n    role: \"treeitem\",\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    \"aria-expanded\": expandable ? expanded : null,\n    ref: handleRef,\n    tabIndex: tabable ? 0 : -1\n  }, other), React.createElement(\"div\", {\n    className: classes.content,\n    onClick: handleClick,\n    ref: contentRef\n  }, icon ? React.createElement(\"div\", {\n    className: classes.iconContainer\n  }, icon) : null, React.createElement(Typography, {\n    component: \"div\",\n    className: classes.label\n  }, label)), children && React.createElement(TransitionComponent, {\n    unmountOnExit: true,\n    className: classes.group,\n    in: expanded,\n    component: \"ul\",\n    role: \"group\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeItem'\n})(TreeItem);","map":{"version":3,"sources":["/Users/jatinkumar/Desktop/Anupuam/Anu/node_modules/@material-ui/lab/esm/TreeItem/TreeItem.js"],"names":["_extends","_objectWithoutProperties","React","clsx","PropTypes","Typography","Collapse","withStyles","useTheme","useForkRef","TreeViewContext","styles","theme","root","listStyle","margin","padding","outline","backgroundColor","palette","grey","expanded","group","marginLeft","content","width","display","alignItems","cursor","action","hover","iconContainer","marginRight","justifyContent","label","isPrintableCharacter","str","length","match","TreeItem","forwardRef","props","ref","children","classes","className","collapseIcon","endIcon","expandIcon","iconProp","icon","nodeId","onClick","onFocus","onKeyDown","_props$TransitionComp","TransitionComponent","other","_React$useContext","useContext","expandAllSiblings","focus","focusFirstNode","focusLastNode","focusNextNode","focusPreviousNode","handleFirstChars","handleLeftArrow","addNodeToNodeMap","removeNodeFromNodeMap","contextIcons","icons","isExpanded","isFocused","isTabable","setFocusByFirstCharacter","toggle","nodeRef","useRef","contentRef","handleRef","expandable","Boolean","Array","isArray","focused","tabable","defaultExpandIcon","defaultCollapseIcon","defaultParentIcon","defaultEndIcon","handleClick","event","printableCharacter","key","handleNextArrow","handlePreviousArrow","handleKeyDown","flag","altKey","ctrlKey","metaKey","currentTarget","target","shift","stopPropagation","current","direction","preventDefault","handleFocus","useEffect","childIds","Children","map","child","undefined","textContent","substring","toLowerCase","createElement","role","tabIndex","component","unmountOnExit","in","process","env","NODE_ENV","propTypes","node","object","string","isRequired","func","elementType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions  */\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { withStyles, useTheme } from '@material-ui/core/styles';\nimport { useForkRef } from '@material-ui/core/utils';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      listStyle: 'none',\n      margin: 0,\n      padding: 0,\n      outline: 0,\n      '&:focus > $content': {\n        backgroundColor: theme.palette.grey[400]\n      }\n    },\n\n    /* Pseudo-class applied to the root element when expanded. */\n    expanded: {},\n\n    /* Styles applied to the `role=\"group\"` element. */\n    group: {\n      margin: 0,\n      padding: 0,\n      marginLeft: 26\n    },\n\n    /* Styles applied to the tree node content. */\n    content: {\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      '&:hover': {\n        backgroundColor: theme.palette.action.hover\n      }\n    },\n\n    /* Styles applied to the tree node icon and collapse/expand icon. */\n    iconContainer: {\n      marginRight: 2,\n      width: 24,\n      display: 'flex',\n      justifyContent: 'center'\n    },\n\n    /* Styles applied to the label element. */\n    label: {\n      width: '100%'\n    }\n  };\n};\n\nvar isPrintableCharacter = function isPrintableCharacter(str) {\n  return str && str.length === 1 && str.match(/\\S/);\n};\n\nvar TreeItem = React.forwardRef(function TreeItem(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      collapseIcon = props.collapseIcon,\n      endIcon = props.endIcon,\n      expandIcon = props.expandIcon,\n      iconProp = props.icon,\n      label = props.label,\n      nodeId = props.nodeId,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      onKeyDown = props.onKeyDown,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Collapse : _props$TransitionComp,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"collapseIcon\", \"endIcon\", \"expandIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onFocus\", \"onKeyDown\", \"TransitionComponent\"]);\n\n  var _React$useContext = React.useContext(TreeViewContext),\n      expandAllSiblings = _React$useContext.expandAllSiblings,\n      focus = _React$useContext.focus,\n      focusFirstNode = _React$useContext.focusFirstNode,\n      focusLastNode = _React$useContext.focusLastNode,\n      focusNextNode = _React$useContext.focusNextNode,\n      focusPreviousNode = _React$useContext.focusPreviousNode,\n      handleFirstChars = _React$useContext.handleFirstChars,\n      handleLeftArrow = _React$useContext.handleLeftArrow,\n      addNodeToNodeMap = _React$useContext.addNodeToNodeMap,\n      removeNodeFromNodeMap = _React$useContext.removeNodeFromNodeMap,\n      contextIcons = _React$useContext.icons,\n      isExpanded = _React$useContext.isExpanded,\n      isFocused = _React$useContext.isFocused,\n      isTabable = _React$useContext.isTabable,\n      setFocusByFirstCharacter = _React$useContext.setFocusByFirstCharacter,\n      toggle = _React$useContext.toggle;\n\n  var nodeRef = React.useRef(null);\n  var contentRef = React.useRef(null);\n  var handleRef = useForkRef(nodeRef, ref);\n  var icon = iconProp;\n  var expandable = Boolean(Array.isArray(children) ? children.length : children);\n  var expanded = isExpanded ? isExpanded(nodeId) : false;\n  var focused = isFocused ? isFocused(nodeId) : false;\n  var tabable = isTabable ? isTabable(nodeId) : false;\n  var icons = contextIcons || {};\n  var theme = useTheme();\n\n  if (!icon) {\n    if (expandable) {\n      if (!expanded) {\n        icon = expandIcon || icons.defaultExpandIcon;\n      } else {\n        icon = collapseIcon || icons.defaultCollapseIcon;\n      }\n\n      if (!icon) {\n        icon = icons.defaultParentIcon;\n      }\n    } else {\n      icon = endIcon || icons.defaultEndIcon;\n    }\n  }\n\n  var handleClick = function handleClick(event) {\n    if (!focused) {\n      focus(nodeId);\n    }\n\n    if (expandable) {\n      toggle(event, nodeId);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var printableCharacter = function printableCharacter(event, key) {\n    if (key === '*') {\n      expandAllSiblings(event, nodeId);\n      return true;\n    }\n\n    if (isPrintableCharacter(key)) {\n      setFocusByFirstCharacter(nodeId, key);\n      return true;\n    }\n\n    return false;\n  };\n\n  var handleNextArrow = function handleNextArrow(event) {\n    if (expandable) {\n      if (expanded) {\n        focusNextNode(nodeId);\n      } else {\n        toggle(event);\n      }\n    }\n  };\n\n  var handlePreviousArrow = function handlePreviousArrow(event) {\n    handleLeftArrow(nodeId, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var flag = false;\n    var key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.currentTarget !== event.target) {\n      return;\n    }\n\n    if (event.shift) {\n      if (key === ' ' || key === 'Enter') {\n        event.stopPropagation();\n      } else if (isPrintableCharacter(key)) {\n        flag = printableCharacter(event, key);\n      }\n    } else {\n      switch (key) {\n        case 'Enter':\n        case ' ':\n          if (nodeRef.current === event.currentTarget && expandable) {\n            toggle(event);\n            flag = true;\n          }\n\n          event.stopPropagation();\n          break;\n\n        case 'ArrowDown':\n          focusNextNode(nodeId);\n          flag = true;\n          break;\n\n        case 'ArrowUp':\n          focusPreviousNode(nodeId);\n          flag = true;\n          break;\n\n        case 'ArrowRight':\n          if (theme.direction === 'rtl') {\n            handlePreviousArrow(event);\n          } else {\n            handleNextArrow(event);\n            flag = true;\n          }\n\n          break;\n\n        case 'ArrowLeft':\n          if (theme.direction === 'rtl') {\n            handleNextArrow(event);\n            flag = true;\n          } else {\n            handlePreviousArrow(event);\n          }\n\n          break;\n\n        case 'Home':\n          focusFirstNode();\n          flag = true;\n          break;\n\n        case 'End':\n          focusLastNode();\n          flag = true;\n          break;\n\n        default:\n          if (isPrintableCharacter(key)) {\n            flag = printableCharacter(event, key);\n          }\n\n      }\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (!focused && tabable) {\n      focus(nodeId);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (addNodeToNodeMap) {\n      addNodeToNodeMap(nodeId, childIds);\n    }\n  }, [children, nodeId, addNodeToNodeMap]);\n  React.useEffect(function () {\n    if (removeNodeFromNodeMap) {\n      return function () {\n        removeNodeFromNodeMap(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [nodeId, removeNodeFromNodeMap]);\n  React.useEffect(function () {\n    if (handleFirstChars && label) {\n      handleFirstChars(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n    }\n  }, [handleFirstChars, nodeId, label]);\n  React.useEffect(function () {\n    if (focused) {\n      nodeRef.current.focus();\n    }\n  }, [focused]);\n  return React.createElement(\"li\", _extends({\n    className: clsx(classes.root, className, expanded && classes.expanded),\n    role: \"treeitem\",\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    \"aria-expanded\": expandable ? expanded : null,\n    ref: handleRef,\n    tabIndex: tabable ? 0 : -1\n  }, other), React.createElement(\"div\", {\n    className: classes.content,\n    onClick: handleClick,\n    ref: contentRef\n  }, icon ? React.createElement(\"div\", {\n    className: classes.iconContainer\n  }, icon) : null, React.createElement(Typography, {\n    component: \"div\",\n    className: classes.label\n  }, label)), children && React.createElement(TransitionComponent, {\n    unmountOnExit: true,\n    className: classes.group,\n    in: expanded,\n    component: \"ul\",\n    role: \"group\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeItem'\n})(TreeItem);"]},"metadata":{},"sourceType":"module"}