{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex'\n    },\n\n    /* Styles applied to the avatar elements. */\n    avatar: {\n      border: \"2px solid \".concat(theme.palette.background.default),\n      marginLeft: -8\n    }\n  };\n};\nvar AvatarGroup = React.forwardRef(function AvatarGroup(props, ref) {\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\"]);\n\n  var children = React.Children.toArray(childrenProp).filter(function (child) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return React.isValidElement(child);\n  });\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children.map(function (child, index) {\n    return React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        zIndex: children.length - index\n      }, child.props.style)\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);","map":{"version":3,"sources":["/Users/jatinkumar/Desktop/react-material-dashboard-master/node_modules/@material-ui/lab/esm/AvatarGroup/AvatarGroup.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","isFragment","clsx","withStyles","styles","theme","root","display","avatar","border","concat","palette","background","default","marginLeft","AvatarGroup","forwardRef","props","ref","childrenProp","children","classes","className","other","Children","toArray","filter","child","process","env","NODE_ENV","console","error","join","isValidElement","createElement","map","index","cloneElement","style","zIndex","length","propTypes","node","object","string","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex'\n    },\n\n    /* Styles applied to the avatar elements. */\n    avatar: {\n      border: \"2px solid \".concat(theme.palette.background.default),\n      marginLeft: -8\n    }\n  };\n};\nvar AvatarGroup = React.forwardRef(function AvatarGroup(props, ref) {\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\"]);\n\n  var children = React.Children.toArray(childrenProp).filter(function (child) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return React.isValidElement(child);\n  });\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children.map(function (child, index) {\n    return React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        zIndex: children.length - index\n      }, child.props.style)\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);"]},"metadata":{},"sourceType":"module"}