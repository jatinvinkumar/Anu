{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied when the popup icon is rendered. */\n    hasPopupIcon: {},\n\n    /* Styles applied when the clear icon is rendered. */\n    hasClearIcon: {},\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4\n      },\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '4px 4px 5px'\n        },\n        '& $input:first-child': {\n          padding: '3px 0 6px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '9.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '9px 4px'\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indicator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indicator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indicator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2\n    },\n\n    /* Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'hidden',\n      margin: '4px 0'\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0px',\n      maxHeight: '40vh',\n      overflow: 'auto'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0,\n      '& $option': {\n        paddingLeft: 24\n      }\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disabledItemsF = props.disabledItemsFocusable,\n      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$getLimitTagsTe = props.getLimitTagsText,\n      getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {\n    return \"+\".concat(more);\n  } : _props$getLimitTagsTe,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$limitTags = props.limitTags,\n      limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      options = props.options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  })),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    var more = startAdornment.length - limitTags;\n\n    if (limitTags && !focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: params.key\n    }, /*#__PURE__*/React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return /*#__PURE__*/React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  var hasClearIcon = !disableClearable && !disabled;\n  var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input is filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.any, PropTypes.array]),\n\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected.\n   * Uses strict equality by default.\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} value\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text will be selected on focus.\n   * It helps the user clear the selected value.\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.array])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":{"version":3,"sources":["/Users/pritivirajkumar/Documents/GitHub/Anu/node_modules/@material-ui/lab/esm/Autocomplete/Autocomplete.js"],"names":["_objectWithoutProperties","_defineProperty","_extends","React","PropTypes","clsx","withStyles","Popper","ListSubheader","Paper","IconButton","Chip","CloseIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","styles","theme","_option","root","visibility","fullWidth","width","focused","tag","margin","maxWidth","tagSizeSmall","hasPopupIcon","hasClearIcon","inputRoot","flexWrap","paddingRight","minWidth","paddingBottom","padding","paddingLeft","right","paddingTop","input","flexGrow","textOverflow","opacity","inputFocused","endAdornment","position","top","clearIndicator","marginRight","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","transform","popper","zIndex","modal","popperDisablePortal","paper","typography","body1","overflow","listbox","listStyle","maxHeight","loading","color","palette","text","secondary","noOptions","option","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","selected","hover","disabledOpacity","pointerEvents","groupLabel","background","groupUl","DisablePortal","props","anchorEl","open","other","createElement","_ref","fontSize","_ref2","Autocomplete","forwardRef","ref","_props$autoComplete","autoComplete","_props$autoHighlight","autoHighlight","_props$autoSelect","autoSelect","_props$blurOnSelect","blurOnSelect","ChipProps","classes","className","_props$clearOnEscape","clearOnEscape","_props$clearText","clearText","_props$closeIcon","closeIcon","_props$closeText","closeText","_props$debug","debug","_props$defaultValue","defaultValue","multiple","_props$disableClearab","disableClearable","_props$disableCloseOn","disableCloseOnSelect","_props$disabled","disabled","_props$disabledItemsF","disabledItemsFocusable","_props$disableListWra","disableListWrap","_props$disablePortal","disablePortal","filterOptions","_props$filterSelected","filterSelectedOptions","_props$forcePopupIcon","forcePopupIcon","_props$freeSolo","freeSolo","_props$fullWidth","_props$getLimitTagsTe","getLimitTagsText","more","concat","getOptionDisabled","_props$getOptionLabel","getOptionLabel","x","getOptionSelected","groupBy","idProp","id","_props$includeInputIn","includeInputInList","inputValueProp","inputValue","_props$limitTags","limitTags","_props$ListboxCompone","ListboxComponent","ListboxProps","_props$loading","_props$loadingText","loadingText","_props$multiple","_props$noOptionsText","noOptionsText","onChange","onClose","onInputChange","onOpen","_props$openOnFocus","openOnFocus","_props$openText","openText","options","_props$PaperComponent","PaperComponent","_props$PopperComponen","PopperComponent","PopperComponentProp","_props$popupIcon","popupIcon","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","_props$selectOnFocus","selectOnFocus","_props$size","size","valueProp","value","_useAutocomplete","componentName","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","popupOpen","focusedTag","setAnchorEl","groupedOptions","startAdornment","length","getCustomizedTagProps","params","map","index","label","Array","isArray","splice","push","key","defaultRenderGroup","component","group","children","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","style","clientWidth","role","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","array","func","number","elementType","isRequired","name"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied when the popup icon is rendered. */\n    hasPopupIcon: {},\n\n    /* Styles applied when the clear icon is rendered. */\n    hasClearIcon: {},\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4\n      },\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '4px 4px 5px'\n        },\n        '& $input:first-child': {\n          padding: '3px 0 6px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '9.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '9px 4px'\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indicator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indicator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indicator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2\n    },\n\n    /* Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'hidden',\n      margin: '4px 0'\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0px',\n      maxHeight: '40vh',\n      overflow: 'auto'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0,\n      '& $option': {\n        paddingLeft: 24\n      }\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disabledItemsF = props.disabledItemsFocusable,\n      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$getLimitTagsTe = props.getLimitTagsText,\n      getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {\n    return \"+\".concat(more);\n  } : _props$getLimitTagsTe,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$limitTags = props.limitTags,\n      limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      options = props.options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  })),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    var more = startAdornment.length - limitTags;\n\n    if (limitTags && !focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: params.key\n    }, /*#__PURE__*/React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return /*#__PURE__*/React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  var hasClearIcon = !disableClearable && !disabled;\n  var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input is filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.any, PropTypes.array]),\n\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected.\n   * Uses strict equality by default.\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} value\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text will be selected on focus.\n   * It helps the user clear the selected value.\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.array])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"]},"metadata":{},"sourceType":"module"}